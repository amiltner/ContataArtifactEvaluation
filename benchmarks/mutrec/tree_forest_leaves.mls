type nat =
  | O
  | S of nat

type tree =
  | Empty
  | Node of A * forest

type forest =
  | Leaf
  | Tree of tree * forest

let add =
  fix (add : nat -> nat -> nat) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> x2
        | S v -> add v (S x2)
;;

synth
  count_leaves_tree : [tree] -> nat calling [count_leaves_forest] ;;
  count_leaves_forest : [forest] -> nat calling [count_leaves_tree, count_leaves_forest] ;;

satisfying

type bool =
  | False
  | True

let nat_eq_unc =
  fix (nat_eq_unc : nat * nat -> bool) =
    fun (x1x2 : nat * nat) ->
        match x1x2 with
        | (O, O) -> True
        | (S _, O) -> False
        | (O, S _) -> False
        | (S l, S r) -> nat_eq_unc (l, r)
;;

test forall (f: forest) . nat_eq_unc (count_leaves_forest f, count_leaves_tree (Node ((| A 0), f))) ;;
test forall (f: forest) . nat_eq_unc (count_leaves_forest f, count_leaves_forest (Tree (Empty, f))) ;;


io count_leaves_tree Empty -> 0 ;;
io count_leaves_forest Leaf -> 1 ;;

io count_leaves_tree (Node ((| A 0), Leaf)) -> 1 ;;
io count_leaves_forest (Tree (Empty, Leaf)) -> 1 ;;
io count_leaves_forest (Tree (Node ((| A 0), Leaf), Leaf)) -> 2 ;;
io count_leaves_forest (Tree (Empty, Tree (Empty, Leaf))) -> 1 ;;
io count_leaves_forest (Tree (Node ((| A 0), Leaf), Tree (Node ((| A 1), Leaf), Leaf))) -> 3 ;;
io count_leaves_forest (Tree (Empty, Tree (Node ((| A 1), Leaf), Leaf))) -> 2 ;;
