type list =
  | Nil
  | Cons of A * list

type bool =
  | False
  | True

synth
  insert : [(A * list)] -> list calling [insert] ;;

satisfying

let not =
  fun (b : bool) ->
    match b with
    | True -> False
    | False -> True
;;

let and_unc =
  fun (b1b2: bool * bool) ->
    match b1b2 with
    | (True, True) -> True
    | _ -> False
;;

let contains =
  fix (contains : A * list -> bool) =
    fun (x1x2 : A * list) ->
        match x1x2 with
        | (x, Nil) -> False
        | (x, Cons (y, ys)) ->
          match x == y with
          | True -> True
          | _ -> contains (x, ys)
;;

let implies_unc =
  fun (b1b2: bool * bool) ->
    match b1b2 with
    | (True, False) -> False
    | _ -> True
;;

(* insertion will not add other elements than the one inserted *)
test forall (x : A) .
      forall (y : A) .
        forall (xs : list) .
          implies_unc (not (and_unc (contains (x, xs), not (x == y))), not (contains (x, insert (y, xs)))) ;;

io insert ((| A 0), Cons ((| A 0), Cons ((| A 1), Nil))) -> Cons ((| A 0), Cons ((| A 1), Cons ((| A 0), Nil))) ;;
