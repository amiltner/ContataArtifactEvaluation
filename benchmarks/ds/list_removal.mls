type list =
  | Nil
  | Cons of A * list

type bool =
  | False
  | True

let a_eq_unc =
    fun (x1x2 : A * A) ->
        match x1x2 with
        | (x, y) -> x == y
;;

synth
  remove : [(A * list)] -> list calling [remove] ;;

satisfying

let contains =
  fix (contains : A * list -> bool) =
    fun (x1x2 : A * list) ->
        match x1x2 with
        | (x, Nil) -> False
        | (x, Cons (y, ys)) ->
          match x == y with
          | True -> True
          | _ -> contains (x, ys)
;;

(* list removal results in a list that does not contain the removed element *)
test forall (x : A) . forall (xs : list) . (contains (x, remove (x, xs))) == False ;;

io remove ((| A 0),Cons ((| A 1), Cons ((| A 0), Nil))) -> Cons ((| A 1), Nil) ;;
io remove ((| A 0),Cons ((| A 0), Cons ((| A 1), Nil))) -> Cons ((| A 1), Nil) ;;
